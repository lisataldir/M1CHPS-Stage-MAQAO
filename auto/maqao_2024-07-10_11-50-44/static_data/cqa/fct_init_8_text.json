{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
        },
      "AVG":
        {
          "hint":
            [
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 16 bytes.",
              },
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 20\nloop length        : 80\nnb stack references: 0\n",
              },
              {
                "title": "Front-end",
                "txt": "DOES NOT FIT IN UOP CACHE\nfront end: 5.00 cycles\n",
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7\n--------------------------------------------------------------\nuops   | 3.00 | 4.33 | 4.33 | 4.33 | 1.00 | 1.00 | 0.50 | 0.50\ncycles | 3.00 | 4.33 | 4.33 | 4.33 | 1.00 | 1.00 | 0.50 | 0.50\n\nExecution ports to units layout:\n - P0: \n - P1: ALU\n - P2: ALU\n - P3: ALU\n - P4 (128 bits): VPU, ALU, DIV/SQRT\n - P5 (128 bits): ALU, VPU\n - P6 (128 bits): load, store data, store address\n - P7 (128 bits): load, store data, store address\n\nCycles executing div or sqrt instructions: NA\n",
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 5.00\nOverall L1: 5.00\n",
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 11%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : 0%\nother  : 0%\nFP\nall     : 100%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 20%\nload    : 100%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 16%\n",
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 5.00 cycles. At this rate:\n - 10% of peak load performance is reached (3.20 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n",
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 4007b0\n\nInstruction                 | Nb FU | P0 | P1   | P2   | P3   | P4   | P5   | P6   | P7   | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------\nCMP W1, #0                  | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nB.LE 400888 <init+0xd8>     | 1     | 1  | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nSUB W2, W1, #1              | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nCMP W2, #2                  | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nB.LS 40088c <init+0xdc>     | 1     | 1  | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nUBFM W3, W1, #2, #31        | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nADD X4, X0, #32             | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nSUB W3, W3, #1              | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nMOVZ W5, #32                | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nMOVI V4.4S, #4              | 1     | 0  | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 2       | 0.50\nADRP X2, 4007d8 <init+0x28> | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nFMOV V2.2D, #1.0000000      | 1     | 0  | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 2       | 0.50\nUMADDL X3, W3, W5, X4       | 1     | 0  | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 2       | 1\nLDR Q3, [X2, #2416]         | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0.50 | 0.50 | 5       | 0.50\nORR X2, XZR, X0             | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nHINT #0\nAND W2, W1, #1886           | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nANDS XZR, X1, #4160         | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nB.EQ 400888 <init+0xd8>     | 1     | 1  | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nHINT #0\n",
              },
            ],
          "header":
            [
            "Warnings:\nThe number of fused uops of the instruction [HINT	#0] is unknown",
            "0% of peak computational performance is used (0.00 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))",
            ],
          "brief":
            [
            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 5.00 to 2.00 cycles (2.50x speedup).",
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "Store and arithmetical VPU instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is probably not vectorized.\nOnly 47% of vector register length is used (average across all VPU instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 5.00 to 4.06 cycles (1.23x speedup).",
              },
            ],
          "potential":
            [
            ],
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 16 bytes.",
                },
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 20\nloop length        : 80\nnb stack references: 0\n",
                },
                {
                  "title": "Front-end",
                  "txt": "DOES NOT FIT IN UOP CACHE\nfront end: 5.00 cycles\n",
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7\n--------------------------------------------------------------\nuops   | 3.00 | 4.33 | 4.33 | 4.33 | 1.00 | 1.00 | 0.50 | 0.50\ncycles | 3.00 | 4.33 | 4.33 | 4.33 | 1.00 | 1.00 | 0.50 | 0.50\n\nExecution ports to units layout:\n - P0: \n - P1: ALU\n - P2: ALU\n - P3: ALU\n - P4 (128 bits): VPU, ALU, DIV/SQRT\n - P5 (128 bits): ALU, VPU\n - P6 (128 bits): load, store data, store address\n - P7 (128 bits): load, store data, store address\n\nCycles executing div or sqrt instructions: NA\n",
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 5.00\nOverall L1: 5.00\n",
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 11%\nload   : 100%\nstore  : NA (no store vectorizable/vectorized instructions)\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : 0%\nother  : 0%\nFP\nall     : 100%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 100%\nINT+FP\nall     : 20%\nload    : 100%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 16%\n",
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 5.00 cycles. At this rate:\n - 10% of peak load performance is reached (3.20 out of 32.00 bytes loaded per cycle (GB/s @ 1GHz))\n",
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 4007b0\n\nInstruction                 | Nb FU | P0 | P1   | P2   | P3   | P4   | P5   | P6   | P7   | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------\nCMP W1, #0                  | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nB.LE 400888 <init+0xd8>     | 1     | 1  | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nSUB W2, W1, #1              | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nCMP W2, #2                  | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nB.LS 40088c <init+0xdc>     | 1     | 1  | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nUBFM W3, W1, #2, #31        | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nADD X4, X0, #32             | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nSUB W3, W3, #1              | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nMOVZ W5, #32                | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nMOVI V4.4S, #4              | 1     | 0  | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 2       | 0.50\nADRP X2, 4007d8 <init+0x28> | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nFMOV V2.2D, #1.0000000      | 1     | 0  | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 2       | 0.50\nUMADDL X3, W3, W5, X4       | 1     | 0  | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 2       | 1\nLDR Q3, [X2, #2416]         | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0.50 | 0.50 | 5       | 0.50\nORR X2, XZR, X0             | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nHINT #0\nAND W2, W1, #1886           | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nANDS XZR, X1, #4160         | 1     | 0  | 0.33 | 0.33 | 0.33 | 0    | 0    | 0    | 0    | 1       | 0.33\nB.EQ 400888 <init+0xd8>     | 1     | 1  | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 1\nHINT #0\n",
                },
              ],
            "header":
              [
              "Warnings:\nThe number of fused uops of the instruction [HINT	#0] is unknown",
              "0% of peak computational performance is used (0.00 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))",
              ],
            "brief":
              [
              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 5.00 to 2.00 cycles (2.50x speedup).",
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "Store and arithmetical VPU instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is probably not vectorized.\nOnly 47% of vector register length is used (average across all VPU instructions).\nBy vectorizing your function, you can lower the cost of an iteration from 5.00 to 4.06 cycles (1.23x speedup).",
                },
              ],
            "potential":
              [
              ],
          },
        ],
      "common":
        {
          "header":
            [
            "The function is defined in /users/m23012/m23012tldr/auto/src/init.c:4-7.\n",
            "Warnings:\nIgnoring paths for analysis",
            ],
        },
    },
}
